set-window-option -g allow-rename on
set-option -g history-limit 4096

set-option -g status-style default
set-option -g status-style bg=colour235,fg=colour244

bind-key ? list-keys

# set window split
bind-key v split-window -h
bind-key b split-window
bind-key | split-window -h
bind-key - split-window
bind-key C-l clear-history

# default window title colors
set-window-option -g window-status-style fg=colour244,bg=default
#set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-style fg=colour166,bg=default
#set-window-option -g window-status-current-style bright

set-option -g set-titles on
if 'test -n "$SSH_CLIENT"' 'set-option -g set-titles-string "#h"'  'set-option -g set-titles-string "#{session_name}"'

# pane border
set-option -g pane-border-style fg=colour235 #base02
# set-option -g pane-active-border-style fg=colour240 #base01
set-option -g pane-active-border-style fg=colour235 #base02

# message text
set-option -g message-style bg=colour235,fg=colour166

# pane number display
set-option -g display-panes-active-colour colour33 #blue
set-option -g display-panes-colour colour166 #orange
set-option -g display-panes-time 60000
# clock
set-window-option -g clock-mode-colour green #green


set -g status-interval 0
set -g status-justify centre # center align window list
set -g status-left-length 20
set -g status-right-length 140
set -g status-left '#[fg=white,bright]#([ #{window_zoomed_flag} = 1 ] && echo ★)  #[default]#[fg=green]#(hostname -s)#[fg=black,bright](#[fg=green,bright]#S#[fg=black])#[default]'
set -g status-right '#[fg=white,bright]#([ #{window_zoomed_flag} = 1 ] && echo ★) #[default]'

# C-b is not acceptable -- Vim uses it
set-option -g prefix C-j
bind-key C-j last-window

bind-key C-b copy-mode

# Start numbering at 1
set -g base-index 1
set-window-option -g pane-base-index 1

# Allows for faster key repetition
set -s escape-time 0

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Allows us to use C-a a <command> to send commands to a TMUX session inside 
# another TMUX session
bind-key a send-prefix

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity on

# bind-key C-s choose-tree

# Vi copypaste mode
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi 'v' send -X begin-selection" "bind-key -t vi-copy 'v' begin-selection
bind-key -T copy-mode-vi 'y' send -X copy-selection" "bind-key -t vi-copy 'y' copy-selection

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# bind 7 select-pane -t :.1
# bind 8 select-pane -t :.2
# bind 9 select-pane -t :.3
# bind 0 select-pane -t :.4

bind 7 if-shell '[ $(tmux list-panes | wc -l) = 1 ]' 'send-keys M-1' 'select-pane -t :.1'
bind 8 if-shell '[ $(tmux list-panes | wc -l) = 1 ]' 'send-keys M-2' 'select-pane -t :.2'
bind 9 if-shell '[ $(tmux list-panes | wc -l) = 1 ]' 'send-keys M-3' 'select-pane -t :.3'
bind 0 if-shell '[ $(tmux list-panes | wc -l) = 1 ]' 'send-keys M-4' 'select-pane -t :.4'

bind -r > select-window -t :+1
bind -r < select-window -t :-1

bind -r H resize-pane -L "5"
bind -r D resize-pane -D "5"
bind -r K resize-pane -U "5"
bind -r L resize-pane -R "5"

# set to main-horizontal, 60% height for main pane
# bind m set-window-option main-pane-height 60\; select-layout main-horizontal
bind m select-layout even-vertical
bind v select-layout even-horizontal

bind C-M-1 select-layout even-horizontal
bind C-M-2 select-layout even-vertical
bind C-M-3 select-layout main-horizontal
bind C-M-4 select-layout main-vertical
bind C-M-5 select-layout tiled

bind-key S set synchronize-panes

bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

bind J run-shell 'function tmux_join_pane() { tmux choose-tree -u -c "join-pane -s $1" ; } ; tmux_join_pane "#{session_name}:#{window_index}"'
bind M choose-tree "run-shell 'function tmux_move_window () { tmux move-window -t $1 ; tmux switch-client -t $1; } ;tmux_move_window  %%'"


bind Tab switch-client -l

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# auto window rename
set-window-option -g automatic-rename

# color
set -g default-terminal "screen-256color"

# https://github.com/edkolev/dots/blob/master/tmux.conf
# Updates for tmux 1.9's current pane splitting paths.

# status bar
set-option -g status-utf8 on

# rm mouse mode fail
set -g mouse on
set -g mode-mouse on; set -g mouse-resize-pane on; set -g mouse-select-pane on; set -g mouse-select-window on;

# fix pane_current_path on new window and splits
unbind c; bind c new-window -c ""
unbind '-'; bind '-' split-window -v -c ''
unbind |; bind | split-window -h -c ""
unbind |; bind | split-window -h -c ""

bind C-m if-shell 'tmux show -gq mouse | grep -q on' 'set -g mouse off; display "Mouse: OFF"' 'set -g mouse on; display "Mouse: ON"'
bind C-m if-shell 'tmux show -gwq mode-mouse | grep -q on' 'set -g mode-mouse off; set -g mouse-resize-pane off; set -g mouse-select-pane off; set -g mouse-select-window off; display "Mouse: OFF"' 'set -g mode-mouse on; set -g mouse-resize-pane on; set -g mouse-select-pane on; set -g mouse-select-window on; display "Mouse: ON"'

bind-key C-d run-shell 'for client in $(tmux list-clients -t . | sed "s/:.*//"); do { echo "$client" | grep -vqF "#{client_name}"; } && tmux detach-client -t "$client"; done'
